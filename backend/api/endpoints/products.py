from backend.database.actions.products import (
   add_product, edit_products, delete_product, 
   show_products, search_products
)
from backend.database.actions.company import get_company_by_id
from fastapi import APIRouter, HTTPException
from backend.api.schemas.products import ProductIn, ProductOut, ProductEdit
from fastapi.responses import FileResponse
from datetime import datetime
import csv # The best music lol....
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, 
    Paragraph, Spacer, Image,
)
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import os

router = APIRouter()

EXPORT_DIR = "exports"
os.makedirs(EXPORT_DIR, exist_ok=True)

BASE_DIR = os.path.dirname(os.path.abspath(__file__)) 
logo_path = os.path.join(BASE_DIR, "check.png")
print("Logo path:", logo_path)
print("Exists:", os.path.exists(logo_path))

@router.get("/products-fetch/", response_model=list[ProductOut])
async def fetch_products(company_id: int, filter_term: str, filter_dir: str):
    products = await show_products(company_id, filter_term, filter_dir)
    if not products:
        raise HTTPException(status_code=404, detail="Products not found")
    return products

@router.get("/products-search/", response_model=list[ProductOut])
async def find_products(company_id: int, search_term: str):
    products = await search_products(company_id, search_term)
    if not products:
        raise HTTPException(status_code=404, detail="Products not found")
    return products

@router.get("/products-export-pdf")
async def fetch_export_product_pdf(company_id: int, filter_term: str):
    products = await show_products(company_id, filter_term, "desc")
    if not products:
        raise HTTPException(status_code=404, detail="Product PDF not found")
    company = await get_company_by_id(company_id)
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    filename = f"{company.company_name}_products_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    path = os.path.join(EXPORT_DIR, filename)

    doc = SimpleDocTemplate(path, pagesize=A4)
    styles = getSampleStyleSheet()
    elements = []
    
    report_title = f"{filter_term.capitalize()} Products Report"
    company_name = company.company_name
    company_email = company.company_email
    company_contact = company.company_contact
    
    custom_title = ParagraphStyle(
        'custom_title',
        parent=styles['Title'],
        alignment=1,
        fontSize=16,
        spaceAfter=10
    )
    print(os.path.exists(logo_path))
    
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=80, height=80)
        logo.hAlign = 'CENTER'
        elements.append(logo)
        elements.append(Spacer(1, 6))
    else:
        print("Not available")
    
    company_info = f"""
        <b>{company_name}</b><br/>
        {company_email} | {company_contact}<br/>
        Date: {datetime.today().strftime("%B %d, %Y")}
    """
    elements.append(Paragraph(company_info, styles["Normal"]))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph(report_title, custom_title))
    elements.append(Spacer(1, 12))
    
    data = [["Product Name", "Category", "Description", "Quantity", "Price", "Date Added"]]
    for p in products:
        data.append(
            [
                p.product_name, p.product_category, p.product_description, 
                str(p.product_quantity), str(p.product_price), str(p.date_added)
            ]
        )
        
    table = Table(data, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#54B108")),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('GRID', (0,0), (-1,-1), 0.4, colors.grey),
        ('BACKGROUND', (0,1), (-1,-1), colors.whitesmoke),
        ('ROWBACKGROUNDS', (0,1), (-1,-1), [colors.whitesmoke, colors.lightgrey]),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))

    signature = """
        <br/><br/><br/>
        ___________________________<br/>
        <b>Authorized Signature</b><br/>
        Generated by CheckMate Admin
    """
    elements.append(Paragraph(signature, styles["Normal"]))
    doc.build(elements)

    return FileResponse(
        path,
        media_type="application/pdf",
        filename=filename
    )

@router.get("/products-export-csv")
async def fetch_export_product_csv(company_id: int, filter_term: str):
    products = await show_products(company_id, filter_term, "desc")
    if not products:
        raise HTTPException(status_code=404, detail="No products found")

    company = await get_company_by_id(company_id)
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")

    filename = f"{company.company_name}_products_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    path = os.path.join(EXPORT_DIR, filename)

    with open(path, mode="w", encoding="utf-8", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([
            "Product Name", "Category", "Description", "Quantity", 
            "Price", "Date Added"
        ])
        for p in products:
            writer.writerow([
                p.product_name,
                p.product_category,
                p.product_description,
                str(p.product_quantity),
                str(p.product_price),
                str(p.date_added)
            ])

    return FileResponse(
        path,
        media_type="text/csv",
        filename=filename
    )

@router.post("/products-add/", response_model=ProductOut)
async def append_product(product_detail: ProductIn):
    try:
        product = await add_product(product_detail.model_dump())
        if not product:
            raise HTTPException(status_code=400, detail="Could not add product")
        return product
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")

@router.put("/products-edit", response_model=ProductOut)
async def format_product(company_id: int, product_id: int, product_detail: ProductEdit):
    try:
        product = await edit_products(company_id, product_id, product_detail.model_dump())
        if not product:
            raise HTTPException(status_code=400, detail="Could not edit product")
        return product
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")

@router.delete("/products-delete")
async def remove_product(company_id: int, product_id: int):
    try:
        await delete_product(company_id, product_id)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")
